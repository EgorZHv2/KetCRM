@using KetCRM.BlazorClient.Enums
@using KetCRM.BlazorClient.Models.Account
@using KetCRM.BlazorClient.Models.Manager
@using KetCRM.BlazorClient.Services.Account
@using KetCRM.BlazorClient.Services.Manager
@inject IManagerService _managerService
@inject IAccountService _accountService;

<div class="modal @ModalClass" id="modalUpdate" tabindex="-1" style="display:@ModalDisplay" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="exampleModalLabel">Изменение данных</h5>
                  <button type="button" class="btn-close" data-mdb-dismiss="modal" aria-label="Close" @onclick="() => Close()"></button>
                </div>
                <EditForm Model="user" OnValidSubmit="HandleUpdate">
                <div class="modal-body">
                @if (ShowErrors)
                {
                    <div class="alert alert-danger" role="alert">
                        @foreach (var error in Errors)
                        {
                            <p>@error</p>
                        }
                    </div>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />
                  <div class="row">
                    <div class="col-6">
                      <label for="name">Имя</label>
                      <InputText Id="name" class="form-control" @bind-Value="user.Name" />
                      <label for="surname">Фамилия</label>
                      <InputText Id="surname" class="form-control" @bind-Value="user.Surname" />
                      <label for="patronymic">Отчество</label>
                      <InputText Id="patronymic" class="form-control" @bind-Value="user.Patronymic" />
                    </div>
                    <div class="col-6">
                      <label for="login">Логин</label>
                      <InputText Id="login" class="form-control" @bind-Value="user.Login" />
                      <label for="email">Почта</label>
                      <InputText Id="email" class="form-control" @bind-Value="user.Email" />
                      <label for="role">Роль</label>
                      <InputSelect @bind-Value="user.Role" style="padding: 4px 0 4px 12px; font-size: 16px"
                        class="gray-color form-select form-select-sm align-items-center">
                        <option value="@Roles.Basic">Староста</option>
                        <option value="@Roles.Moderator">Кл.руководитель</option>
                        <option value="@Roles.Admin">Секретарь</option>
                        <option value="@Roles.SuperAdmin">Админ</option>
                     </InputSelect>
                    </div>
                    <div class="mt-3">
                      <InputFile OnChange="@SingleUpload" accept=".jpg" class="form-control gray-color" id="formFile" />
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-danger" @onclick="() => Close()">Отменить</button>
                  <button type="submit" class="btn btn-info" @onclick="HandleUpdate">
                    @{
                    if(loading)
                    {
                        <span>Загрузка...</span>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span>Добавить</span>
                    }
                    }
                </button>
                </div>
                </EditForm>
              </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private UserModel user = new UserModel();
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private bool loading = false;
    private UpdateUser updateUser = new UpdateUser();
    private bool ShowErrors = false;
    private IEnumerable<string> Errors;
    private bool bClearInputFile = false;

    public async Task GetUser(string name)
    {
        loading = true;
        user = await _managerService.GetUserByName(name);
        loading = false;
    }

    public async Task Open(string name)
    {
        await GetUser(name);
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void ClearInputFields()
    {
        user.Name = string.Empty; 
        user.Surname = string.Empty;
        user.Patronymic = string.Empty;
        user.Email = string.Empty;
        user.Login = string.Empty;
    }

    private void ClearInputFile()
    {
        bClearInputFile = true;
        StateHasChanged();
        bClearInputFile = false;
        StateHasChanged();
    }

    private async Task HandleUpdate(){
        string name = user.Login;
        updateUser.Name = user.Name;
        updateUser.Surname = user.Surname;
        updateUser.Patronymic = user.Patronymic;
        updateUser.Email = user.Email;
        updateUser.Login = user.Login;
        updateUser.Role = user.Role;

        ShowErrors = false;
        loading = true;
        var result = await _accountService.UpdateUser(updateUser, name);
        loading = false;

        @if (result.Successful)
        {
            await Close();
            ClearInputFields();
            ClearInputFile();
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }  
        await Close();
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        user.Image = bytes;
    }

    public async Task Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}
